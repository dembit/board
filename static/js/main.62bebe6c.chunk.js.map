{"version":3,"sources":["Styles/globalStyle.js","Redux/reducers/boardReducer/boardReducer.ts","VariablesAndFunc/Functions.ts","Styles/styleComponent.ts","components/Common/PopUps/PopWithInput/PopUpWithINput.tsx","components/Cards/ImgWithText/ImgWithText.tsx","components/Cards/AddCard/img/arrow.svg","components/Cards/AddCard/AddCard.tsx","components/Cards/Card/Card.tsx","components/Common/PopUps/useInstallPopUp.ts","components/Cards/CardTitle/CardTitle.tsx","components/Cards/Cards.tsx","App.tsx","reportWebVitals.ts","Styles/Theme.ts","Redux/reducers/reducerTollKitExample.ts","Redux/redux.ts","index.tsx"],"names":["GlobalStyles","createGlobalStyle","moveCartThunk","createAsyncThunk","from","to","getState","dispatch","boards","boardReducer","boardFrom","itemFrom","boardTo","itemTo","indexBoardFrom","indexOf","indexItemFrom","items","indexBoardTo","indexItemTo","deleteCard","indexBoard","indexCard","newState","addCard","item","elementsCount","length","console","log","initialState","board","title","id","text","createSlice","name","reducers","setItems","state","action","payload","map","index","filter","find","itemLocal","copy","splice","setText","value","boardIndex","itemIndex","setColumn","newBoard","setNewTextOfCard","boardLocal","actions","getUniqueKey","Math","random","toString","substr","useAppSelector","useSelector","BlueButtonStyle","styled","button","PopUpWrapStyle","div","PopUpFonStyle","PopUpStyle","PopUpTitleStyle","PopUpTextStyle","PopUpWithInput","isActive","textButton","placeholder","setIsActive","buttonClick","useState","setValue","useEffect","onClick","onChange","e","target","ImgWitTextWrapStyle","ImgWitText","img","callback","src","alt","AddCardWrapStyle","form","AddCarStyle","AddCarInputStyle","imgDf","Arrow","AddCard","textNotAct","textActiveLeft","textActiveRight","plh","imgActive","imgNotActive","getValue","onSubmit","preventDefault","ClickButton","required","WrapItemStyle","ContentItemStyle","WrapTextStyle","TitleStyle","startState","Card","moveItem","cardClick","addNewCard","onDragOver","onDrop","slice","onDrag","event","style","opacity","onDragStart","el","parent","parentElement","backgroundColor","boxShadow","dragStart","draggable","onDropCapture","Drop","onDragEnter","currentTarget","color","DragEnter","onDragLeave","DragLeave","onDragEnd","useActivePopUp","data","active","content","setContent","TitleCardsStyle","CardTitle","getDataValue","setTitle","type","WrapCardsStyle","PreviewTextStyle","Cards","useDispatch","currentEl","setCurrentEl","CardClick","AppDivStyle","App","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ThemeLight","type1","type2","type3","size","type4","getPost","a","fetch","credentials","headers","response","json","counterSlice","list","status","increment","decrement","incrementByAmount","extraReducers","builder","addCase","pending","fulfilled","rejected","store","configureStore","reducer","ReactDOM","render","theme","StrictMode","document","getElementById"],"mappings":"2KAwBeA,EAtBMC,YAAH,gd,8CCSLC,EAAgBC,YAI3B,oBAAoB,cAA2C,IAAxCC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,GAAQC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SACzCC,EAAWF,IAAWG,aAAtBD,OAEN,GAAKJ,EAAL,CAKA,IAAMM,EAAwBN,EAAxBM,UAAWC,EAAaP,EAAbO,SACXC,EAAoBP,EAApBO,QAASC,EAAWR,EAAXQ,OAEXC,EAAiBN,EAAOO,QAAQL,GAChCM,EAAgBR,EAAOM,GAAgBG,MAAMF,QAAQJ,GAErDO,EAAeV,EAAOO,QAAQH,GAGlC,GAAKC,EAAL,CAkBA,IAAIM,EAAcX,EAAOU,GAAcD,MAAMF,QAAQF,GACrDN,EAASa,EAAW,CAACC,WAAYP,EAAgBQ,UAAWN,EAAeR,YAC3E,IAAIe,EAAWjB,IAAWG,aAC1BF,EACEiB,EAAQ,CACNH,WAAYH,EACZI,UAAWH,EACXM,KAAMd,EACNH,OAAQe,EAASf,cA1BrB,CAEED,EAASa,EAAW,CAACC,WAAYP,EAAgBQ,UAAWN,EAAeR,YAE3E,IAAIe,EAAWjB,IAAWG,aACtBiB,EAAgBH,EAASf,OAAOU,GAAcD,MAAMU,OAExDpB,EACEiB,EAAQ,CACNH,WAAYH,EACZI,UAAWI,EACXD,KAAMd,EACNH,OAAQe,EAASf,gBAzBrBoB,QAAQC,IAAI,4BAgDVC,EAAe,CACnBtB,OAAQ,CACN,CACEuB,MAAO,EACPC,MAAO,SACPf,MAAO,CACL,CAAEgB,GAAI,EAAGC,KARL,yPASJ,CAAED,GAAI,EAAGC,KAAM,cAGnB,CAAEH,MAAO,EAAGC,MAAO,GAAIf,MAAO,CAAC,CAAEgB,GAAI,EAAGC,KAAM,cAC9C,CACEH,MAAO,EACPC,MAAO,SACPf,MAAO,CACL,CAAEgB,GAAI,EAAGC,KAAM,WACf,CAAED,GAAI,EAAGC,KAAM,YACf,CAAED,GAAI,EAAGC,KAAM,aAGnB,CACEH,MAAO,EACPC,MAAO,SACPf,MAAO,CACL,CAAEgB,GAAI,EAAGC,KAAM,WACf,CAAED,GAAI,EAAGC,KAAM,YACf,CAAED,GAAI,EAAGC,KAAM,cAGnB,CACEH,MAAO,EACPC,MAAO,SACPf,MAAO,CACL,CAAEgB,GAAI,EAAGC,KAAM,WACf,CAAED,GAAI,EAAGC,KAAM,YACf,CAAED,GAAI,EAAGC,KAAM,gBAiDVzB,EAAe0B,YAAY,CACtCC,KAAM,QACNN,eACAO,SAAU,CACRC,SAAU,SAACC,EAAOC,GAChBD,EAAM/B,OAASgC,EAAOC,QAAQjC,QAEhCY,WAAY,SAACmB,EAAOC,GAClB,MAAwCA,EAAOC,QAAzCpB,EAAN,EAAMA,WAAYC,EAAlB,EAAkBA,UAAWd,EAA7B,EAA6BA,OAC7B+B,EAAM/B,OAASA,EAAOkC,KAAI,SAACX,EAAOY,GAChC,GAAIA,IAAUtB,EAAY,CACxB,IAAIJ,EAAQc,EAAMd,MAAM2B,QAAO,SAACnB,EAAMkB,GAAP,OAAiBA,GAASrB,KACzD,OAAO,2BACFS,GADL,IAEEd,UAGJ,OAAOc,MAGXP,QAAS,SAACe,EAAOC,GACf,MAA8CA,EAAOC,QAA/CpB,EAAN,EAAMA,WAAYC,EAAlB,EAAkBA,UAAWG,EAA7B,EAA6BA,KAAMjB,EAAnC,EAAmCA,OAGnBA,EAAOa,GAAYJ,MAAM4B,MAAK,SAACC,GAC7C,OAAOA,IAAcrB,KAIlBG,QAAQC,IAAI,mDAKjBU,EAAM/B,OAASA,EAAOkC,KAAI,SAACX,EAAOY,GAChC,GAAIA,IAAUtB,EAAY,CACxB,IAAI0B,EAAI,YAAOhB,EAAMd,OAErB,OADA8B,EAAKC,OAAO1B,EAAW,EAAGG,GACnB,2BACFM,GADL,IAEEd,MAAO8B,IAGX,OAAOhB,MAIXkB,QAAS,SAACV,EAAOC,GACf,MAA8BA,EAAOC,QAA/BhB,EAAN,EAAMA,KAAMyB,EAAZ,EAAYA,MAAO1C,EAAnB,EAAmBA,OACf2C,EAAa,KACbC,EAAY,KAGhB5C,EAAOkC,KAAI,SAACX,EAAOV,GAOjB,OANAU,EAAMd,MAAMyB,KAAI,SAACI,EAAWH,GACtBlB,IAASqB,IACVK,EAAa9B,EACb+B,EAAYT,MAGVZ,KAGS,OAAfoB,GAAqC,OAAdC,IAI1Bb,EAAM/B,OAAO2C,GAAYlC,MAAMmC,GAAWlB,KAAOgB,IAGnDG,UAAW,SAACd,EAAOC,GACjB,MAAsBA,EAAOC,QAAvBT,EAAN,EAAMA,MAAOE,EAAb,EAAaA,KAEToB,EAAY,CACdvB,MAFcQ,EAAM/B,OAAOmB,OAG3BK,QACAf,MAAO,CACL,CAAEgB,GAAI,EAAGC,UAIbK,EAAM/B,OAAN,sBACK+B,EAAM/B,QADX,CAEE8C,KAIJC,iBAAkB,SAAChB,EAAOC,GACxB,MAA+BA,EAAOC,QAAhCS,EAAN,EAAMA,MAAOnB,EAAb,EAAaA,MAAOvB,EAApB,EAAoBA,OAChBmC,EAAQ,KACRV,EAAK,KACLhB,EAAQ,KAEZT,EAAOkC,KAAI,SAACc,EAAYnC,GAMtB,OALGmC,IAAezB,IACfY,EAAQtB,EACRY,EAAKuB,EAAWvC,MAAMU,OACtBV,EAAQuC,EAAWvC,OAEfuC,KAGI,OAAVb,GAAyB,OAAPV,GAAyB,OAAVhB,IAGpCsB,EAAM/B,OAAOmC,GAAO1B,MAApB,sBAAgCA,GAAhC,CAAuC,CAACgB,KAAIC,KAAMgB,UAOjD,EAAgFzC,EAAagD,QAA3ErC,GAAlB,EAAQkB,SAAR,EAAkBlB,YAAYI,EAA9B,EAA8BA,QAASyB,EAAvC,EAAuCA,QAASI,EAAhD,EAAgDA,UAAWE,EAA3D,EAA2DA,iBAEnD9C,IAAf,QC3OO,I,oCAAMiD,EAAe,kBAAMC,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAG,IAG1DC,EAAkDC,IC9BlDC,EAAkBC,IAAOC,OAAV,wR,OCGtBC,EAAiBF,IAAOG,IAAV,kKAYdC,EAAgBJ,IAAOG,IAAV,6LAWbE,EAAaL,IAAOG,IAAV,mSAgBVG,EAAkBN,IAAOG,IAAV,+SAcfI,GAAiBP,IAAOG,IAAV,qIAgELK,GAxCmB,SAAC,GAA2E,IAAzEC,EAAwE,EAAxEA,SAAUzC,EAA8D,EAA9DA,KAAM0C,EAAwD,EAAxDA,WAAYC,EAA4C,EAA5CA,YAAaC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,YAEvF,EAA2BC,mBAAS9C,GAApC,mBAAOgB,EAAP,KAAe+B,EAAf,KAMA,OAJAC,qBAAU,WACPD,EAAS/C,KACT,CAACyC,IAECA,EAIE,eAACP,EAAD,WACH,cAACE,EAAD,CAAea,QAAS,kBAAML,GAAaH,MAC3C,cAACJ,EAAD,UACI,gCACI,cAACC,EAAD,UACI,+BACKtB,MAGT,cAACuB,GAAD,UACI,0BACIvB,MAAOA,EACP2B,YAAaA,GA3BpB,mDA4BOO,SAAU,SAACC,GAAD,OAAOJ,EAASI,EAAEC,OAAOpC,YAG3C,cAACe,EAAD,CAAiBkB,QAAS,kBAAMJ,EAAY7B,IAA5C,SACK0B,GA/BD,oDAWL,yBCzFTW,GAAsBrB,IAAOG,IAAV,mVAsCVmB,GARe,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,IAAKvD,EAAoB,EAApBA,KAAMwD,EAAc,EAAdA,SAEzC,OAAO,eAACH,GAAD,CAAqBJ,QAASO,EAA9B,UACA,qBAAKC,IAAKF,EAAKG,IAAK1D,IACpB,+BAAOA,QCrCD,OAA0B,kCCMnC2D,GAAmB3B,IAAO4B,KAAV,+CAGhBC,GAAc7B,IAAOG,IAAV,yFAKX2B,GAAmB9B,IAAOG,IAAV,8OAyBlB4B,GAAQC,GAoDGC,GAlDY,SAAC,GASjB,IAAD,IARLC,kBAQK,MAfS,gJAeT,MAPLC,sBAOK,MAdS,oGAcT,MANLC,uBAMK,MAbU,uCAaV,MALLC,WAKK,MAZE,6HAYF,MAJLC,iBAIK,MAJOP,GAIP,MAHLQ,oBAGK,MAHUR,GAGV,EAFLS,EAEK,EAFLA,SAID,EAAgC1B,oBAAS,GAAzC,mBAAOL,EAAP,KAAiBG,EAAjB,KACA,EAA0BE,mBAAS,IAAnC,mBAAO9B,EAAP,KAAc+B,EAAd,KAEA,OAAKN,EAKE,eAACkB,GAAD,CAAkBc,SAAU,SAACtB,GAAD,OAkBpC,SAAqBA,GACjBA,EAAEuB,iBACFF,EAASxD,GACT4B,GAAY,GACZG,EAAS,IAtB8B4B,CAAYxB,IAA/C,UACH,cAACW,GAAD,UACI,0BACCc,UAAQ,EACRjC,YAAa0B,EACbrD,MAAOA,EACPkC,SAAU,SAACC,GAAD,OAAOJ,EAASI,EAAEC,OAAOpC,YAGxC,eAAC6C,GAAD,WACI,cAAC9B,EAAD,UACKoC,IAEL,cAAC,GAAD,CAAYX,SAYpB,WACIZ,GAAY,GACZG,EAAS,KAdyB/C,KAAMoE,EAAiBb,IAAKe,UAjBvD,cAAC,GAAD,CAAYd,SAAU,kBAAMZ,GAAY,IAAO5C,KAAMkE,EAAYX,IAAKgB,KChD/EM,GAAgB7C,IAAOG,IAAV,4KAUb2C,GAAmB9C,IAAOG,IAAV,uEAOhB4C,GAAgB/C,IAAOG,IAAV,0WAsBb6C,GAAahD,IAAOG,IAAV,+JAiDZ8C,GAAa,KA4GFC,GA1GS,SAAC,GAAgD,IAA9CrF,EAA6C,EAA7CA,MAAOsF,EAAsC,EAAtCA,SAAUC,EAA4B,EAA5BA,UAAWC,EAAiB,EAAjBA,WAC3CvF,EAAiBD,EAAjBC,MAAOf,EAAUc,EAAVd,MAEf,OAAO,eAAC8F,GAAD,CAAeS,WAAY,SAACnC,GAAD,OAAOmC,EAAWnC,IAAIoC,OAAQ,SAACpC,GAAD,OAAgBA,EAgG1EuB,iBACNS,EAASF,GAAY,CAACvG,QAASmB,EAAOlB,OAAQ,YAC9CsG,GAAa,OAlGN,UACH,eAACH,GAAD,WACI,cAACE,GAAD,UACI,+BACKlF,MAGRf,EAAMyB,KAAI,SAAAjB,GACP,IAAIS,EAAOT,EAAKS,KAOhB,OAJIT,EAAKS,KAAKP,QADC,KAEXO,EAAOT,EAAKS,KAAKwF,MAAM,EAFZ,IAE2B,OAGnC,cAACT,GAAD,UACH,qBACIU,OAAQ,SAACtC,GAAD,OA6ChBuC,EA7C8BvC,GA8CpCuB,sBACGgB,EAAMtC,OACZuC,MAAMC,QAAU,KAHvB,IAAgBF,GA5CQG,YAAa,SAAC1C,GAAD,OA4BrC,SAAmBuC,EAAqD7F,EAAkBN,GACtF,IAAIuG,EAAKJ,EAAMtC,OACX2C,EAASD,EAAGE,cAChB,IAAKD,EACD,OAEJD,EAAGH,MAAMM,gBAAkB,UAC3BF,EAAOJ,MAAMM,gBAAkB,UAC/BH,EAAGH,MAAMO,UAAY,mEACrBjB,GAAa,CAACzG,UAAWqB,EAAOpB,SAAUc,GArCF4G,CAAUhD,EAAGtD,EAAON,IACxC6G,WAAW,EACXd,WAAY,SAACnC,GAAD,OAAOmC,EAAWnC,IAC9BkD,cAAe,SAAClD,GAAD,OAoEvC,SAAcuC,EAAwCnG,GAClDmG,EAAMhB,iBACNS,EAASF,GAAY,CAACvG,QAASmB,EAAOlB,OAAQY,IAC9C0F,GAAa,KAvE6BqB,CAAKnD,EAAG5D,IAC9BgH,YAAa,SAACpD,GAAD,OAoDrC,SAAmBuC,GACf,IAAII,EAAKJ,EAAMc,cACfV,EAAGH,MAAMM,gBAAkB,UAC3BH,EAAGH,MAAMc,MAAQ,OAvDuBC,CAAUvD,IAC9BwD,YAAa,SAACxD,GAAD,OA0DrC,SAAmBuC,GACfA,EAAMhB,iBACN,IAAIoB,EAAKJ,EAAMtC,OACf0C,EAAGH,MAAMM,gBAAkB,GAC3BH,EAAGH,MAAMc,MAAQ,GA9DuBG,CAAUzD,IAC9BF,QAAS,kBAAMmC,EAAU7F,IACzBsH,UAAW,SAAC1D,GACR,IAAI2C,EAAK3C,EAAEqD,cACXV,EAAGH,MAAMC,QAAU,IACnBE,EAAGH,MAAMM,gBAAkB,QAZnC,SAeKjG,KAhBkBwB,WAsBjC,cAAC,GAAD,CAASgD,SAInB,SAAqBxD,GAClBqE,EAAWrE,EAAOnB,SA4BrB,SAASyF,EAAWI,GAChBA,EAAMhB,mBC3JKoC,GAbQ,SAAIC,EAAUC,GACjC,MAAgClE,qBAAUkE,GAA1C,mBAAOvE,EAAP,KAAiBG,EAAjB,KACA,EAA8BE,mBAASiE,GAAc,MAArD,mBAEA,MAAO,CACHtE,WACAG,cACAqE,QALJ,KAMIC,WANJ,OCFEC,GAAkBnF,IAAO4B,KAAV,2PAuCNwD,GAnBc,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAC5B,EAAwBvE,mBAAS,IAAjC,mBAAO9C,EAAP,KAAae,EAAb,KACA,EAA0B+B,mBAAS,IAAnC,mBAAOhD,EAAP,KAAcwH,EAAd,KAGA,OAAO,eAACH,GAAD,CAAiB1C,SAAU,SAACtB,GAC/BA,EAAEuB,iBACF2C,EAAavH,EAAOE,GACpBe,EAAQ,QACRuG,EAAS,UAJN,UAMH,cAACvF,EAAD,yBAGA,uBAAOwF,KAAK,OAAO3C,UAAQ,EAACjC,YAjBrB,sBAiB4C3B,MAAOlB,EAAOoD,SAAU,SAACC,GAAD,OAAOmE,EAASnE,EAAEC,OAAOpC,UACpG,uBAAOuG,KAAK,OAAO3C,UAAQ,EAACjC,YAjBtB,qBAiB4C3B,MAAOhB,EAAMkD,SAAU,SAACC,GAAD,OAAOpC,EAAQoC,EAAEC,OAAOpC,cC3BnGwG,GAAiBxF,IAAOG,IAAV,0JAOdsF,GAAmBzF,IAAOG,IAAV,sLA6FPuF,GAzEU,WACrB,IAAIpJ,EAASuD,GAAe,SAACxB,GAAD,OAAWA,EAAM9B,aAAaD,UACtDD,ETT4BsJ,cSWhC,EAAgC7E,mBAA0B,MAA1D,mBAAK8E,EAAL,KAAgBC,EAAhB,KAEA,EAAqDf,KAA/CG,EAAN,EAAMA,QAASC,EAAf,EAAeA,WAAYzE,EAA3B,EAA2BA,SAAUG,EAArC,EAAqCA,YAErC,OAAO,qCACH,eAAC6E,GAAD,WACI,gCACI,4UACA,kXACA,wRACA,2QAEA,oGACA,6HAEJ,gCACI,yFACA,gGACA,wFACA,wEAEA,uCACA,gIAKR,cAAC,GAAD,CAAWJ,aAWf,SAAsBvH,EAAeE,GACjC3B,EAAS8C,EAAU,CAAErB,QAAOE,aAX5B,cAACwH,GAAD,UACKlJ,EAAOkC,KAAI,SAAAX,GAAK,OAAI,cAAC,GAAD,CAAMwF,WAAYA,EAAYD,UAAW0C,EAAW3C,SAAUA,EAA+BtF,MAAOA,GAAvB2B,UAErGyF,GAAW,cAAC,GAAD,CAAgBxE,SAAUA,EAAUzC,KAAMiH,EAASrE,YAAaA,EAAaC,YAiB7F,SAAqB7B,GACjB,IAAK4G,EAED,YADAlI,QAAQC,IAAI,+CAGhBtB,EAAS0C,EAAQ,CAAEC,QAAOzB,KAAMqI,EAAWtJ,YAC3CsE,GAAY,SApBhB,SAASyC,EAAWrE,EAAenB,GAC/BxB,EAASgD,EAAiB,CAAEL,QAAOnB,QAAOvB,YAO9C,SAASwJ,EAAUvI,GACf2H,EAAW3H,EAAKS,MAChB4C,GAAY,GACZiF,EAAatI,GAejB,SAAS4F,EAASjH,EAA6BC,GAC3CE,EAASL,EAAc,CAAEE,OAAMC,UC9FjC4J,GAAc/F,IAAOG,IAAV,mEAuBF6F,OAhBf,WAEE,OACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAACD,GAAD,UACI,cAAC,IAAD,CAAOE,KAAK,IAAIC,UAAWR,YCTxBS,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCWCQ,GApBE,CACfnC,MAAO,CACLoC,MAAO,UACPC,MAAO,UACPC,MAAO,WAETC,KAAM,CACJH,MAAO,OACPC,MAAO,OACPC,MAAO,OACPE,MAAO,S,qCCFEC,GAAWjL,YACtB,eADsC,wBAExC,6BAAAkL,EAAA,sEACyBC,MAAM,+CAAgD,CAC3EC,YAAa,UACbC,QAAS,CACP,eAAgB,sBAJtB,cACQC,EADR,gBAOiBA,EAASC,OAP1B,oFA6BaC,GAAexJ,YAAY,CACtCC,KAAM,UAENN,aAZmB,CACnBoB,MAAO,EACP0I,KAAM,GACNC,OAAQ,IAURxJ,SAAU,CACRyJ,UAAW,SAACvJ,GACVA,EAAMW,OAAS,GAEjB6I,UAAW,SAACxJ,GACVA,EAAMW,OAAS,GAGjB8I,kBAAmB,SAACzJ,EAAOC,GACzBD,EAAMW,OAASV,EAAOC,UAG1BwJ,cAAe,SAACC,GACdA,EAAQC,QAASf,GAAQgB,SAAS,SAAC7J,EAAOC,GACtCD,EAAMsJ,OAAS,aACdM,QAASf,GAAQiB,WAAW,SAAC9J,EAAOC,GAErCD,EAAMqJ,KAAOpJ,EAAOC,QACpBF,EAAMsJ,OAAS,aACdM,QAAQf,GAAQkB,UAAU,SAAC/J,EAAOC,GACnCD,EAAMsJ,OAAS,eAKhB,GAAoDF,GAAalI,QAKzDkI,IALR,GAAQG,UAAR,GAAmBC,UAAnB,GAA8BC,kBAKtBL,GAAf,SCpEaY,GAAQC,YAAe,CAClCC,QAAS,CACPd,gBACAlL,kBCKJiM,IAASC,OACP,cAAC,IAAD,CAAUJ,MAAOA,GAAjB,SACE,cAAC,IAAD,CAAeK,MAAO9B,GAAtB,SACE,eAAC,IAAM+B,WAAP,WACE,cAAC,EAAD,IACA,cAAC,GAAD,WAMNC,SAASC,eAAe,SAM1B1C,O","file":"static/js/main.62bebe6c.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nconst GlobalStyles = createGlobalStyle`\r\nbody {\r\n  \r\n  margin: 0;\r\n  font-family: -apple-system, BlinkMacSystemFont,  \"DINPro\", 'Segoe UI', 'Roboto', 'Oxygen',\r\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\r\n    sans-serif;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n}\r\n\r\ncode {\r\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\r\n    monospace;\r\n}\r\n\r\na {\r\n    text-decoration: none;\r\n}\r\n\r\n`\r\n\r\nexport default GlobalStyles","import { createSlice, createAsyncThunk, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport {\r\n  BoardEndType,\r\n  BoardStartType,\r\n  BoardType,\r\n  ItemType,\r\n} from \"../../../components/Cards/Card/Card\";\r\nimport { AppDispatch, RootState } from \"../../redux\";\r\n\r\n\r\n\r\nexport const moveCartThunk = createAsyncThunk<\r\n  void,\r\n  moveCartThunkType,\r\n  { dispatch: AppDispatch; state: RootState }\r\n>(\"board/deleteCart\", ({ from, to }, { getState, dispatch }) => {\r\n  let { boards } = getState().boardReducer;\r\n\r\n  if (!from) {\r\n    console.log(\"column transfer error\");\r\n    return;\r\n  }\r\n\r\n  let { boardFrom, itemFrom } = from;\r\n  let { boardTo, itemTo } = to;\r\n\r\n  let indexBoardFrom = boards.indexOf(boardFrom);\r\n  let indexItemFrom = boards[indexBoardFrom].items.indexOf(itemFrom);\r\n\r\n  let indexBoardTo = boards.indexOf(boardTo);\r\n\r\n  //if ItemTo undefined its means the event onDrop happened on the column\r\n  if (!itemTo) {\r\n\r\n    dispatch(deleteCard({indexBoard: indexBoardFrom, indexCard: indexItemFrom, boards}))\r\n\r\n    let newState = getState().boardReducer\r\n    let elementsCount = newState.boards[indexBoardTo].items.length\r\n\r\n    dispatch(\r\n      addCard({\r\n        indexBoard: indexBoardTo,\r\n        indexCard: elementsCount,\r\n        item: itemFrom,\r\n        boards: newState.boards\r\n      })\r\n    );\r\n    return;\r\n  }\r\n\r\n  let indexItemTo = boards[indexBoardTo].items.indexOf(itemTo);\r\n  dispatch(deleteCard({indexBoard: indexBoardFrom, indexCard: indexItemFrom, boards}))\r\n  let newState = getState().boardReducer\r\n  dispatch(\r\n    addCard({\r\n      indexBoard: indexBoardTo,\r\n      indexCard: indexItemTo,\r\n      item: itemFrom,\r\n      boards: newState.boards\r\n    })\r\n  )\r\n\r\n});\r\n\r\n// Define the initial state using that type\r\nlet title = \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.\"\r\n\r\nconst initialState = {\r\n  boards: [\r\n    {\r\n      board: 1,\r\n      title: \"title1\",\r\n      items: [\r\n        { id: 1, text: title },\r\n        { id: 2, text: \"board1_2\" },\r\n      ],\r\n    },\r\n    { board: 2, title: \"\", items: [{ id: 1, text: \"board2_1\" }] },\r\n    {\r\n      board: 3,\r\n      title: \"title3\",\r\n      items: [\r\n        { id: 1, text: \"text3_1\" },\r\n        { id: 2, text: \"board3_2\" },\r\n        { id: 3, text: \"text3_3\" },\r\n      ],\r\n    },\r\n    {\r\n      board: 4,\r\n      title: \"title4\",\r\n      items: [\r\n        { id: 1, text: \"text4_1\" },\r\n        { id: 2, text: \"board4_2\" },\r\n        { id: 3, text: \"text14_3\" },\r\n      ],\r\n    },\r\n    {\r\n      board: 5,\r\n      title: \"title5\",\r\n      items: [\r\n        { id: 1, text: \"text5_1\" },\r\n        { id: 2, text: \"board5_2\" },\r\n        { id: 3, text: \"text15_3\" },\r\n      ],\r\n    },\r\n\r\n  ],\r\n};\r\n\r\n// Define a type for the slice state\r\ntype CounterStateType = typeof initialState;\r\n\r\nexport interface moveCartThunkType {\r\n  from: BoardStartType | null;\r\n  to: BoardEndType;\r\n}\r\n\r\nexport interface deleteCardType {\r\n  indexBoard: number;\r\n  indexCard: number;\r\n  boards: BoardType[];\r\n}\r\n\r\nexport interface AddCardType {\r\n  indexBoard: number;\r\n  indexCard: number;\r\n  item: ItemType;\r\n  boards: BoardType[];\r\n}\r\n\r\nexport interface SetItemType {\r\n  boards: BoardType[];\r\n}\r\n\r\nexport interface SetTextType {\r\n  item: ItemType;\r\n  value: string\r\n  boards: BoardType[];\r\n}\r\n\r\nexport interface SetColumnType {\r\n  title: string\r\n  text: string\r\n}\r\n\r\nexport interface SetNewTextOfCardType {\r\n  value: string\r\n  board: BoardType\r\n  boards: BoardType[]\r\n}\r\n\r\nexport const boardReducer = createSlice({\r\n  name: \"board\",\r\n  initialState,\r\n  reducers: {\r\n    setItems: (state, action: PayloadAction<SetItemType>) => {\r\n      state.boards = action.payload.boards;\r\n    },\r\n    deleteCard: (state, action: PayloadAction<deleteCardType>) => {\r\n      let { indexBoard, indexCard, boards } = action.payload;\r\n      state.boards = boards.map((board, index) => {\r\n        if (index === indexBoard) {\r\n          let items = board.items.filter((item, index) => index != indexCard);\r\n          return {\r\n            ...board,\r\n            items,\r\n          };\r\n        }\r\n        return board;\r\n      });\r\n    },\r\n    addCard: (state, action: PayloadAction<AddCardType>) => {\r\n      let { indexBoard, indexCard, item, boards } = action.payload;\r\n\r\n      // check for existing el\r\n      let itemBoard = boards[indexBoard].items.find((itemLocal) => {\r\n        return itemLocal === item;\r\n      });\r\n\r\n      if(itemBoard) {\r\n           console.log(\"we cant add elem because the one already exists\")\r\n           return\r\n      }\r\n\r\n      //add el\r\n      state.boards = boards.map((board, index) => {\r\n        if (index === indexBoard) {\r\n          let copy = [...board.items]\r\n          copy.splice(indexCard, 0, item)\r\n          return {\r\n            ...board,\r\n            items: copy\r\n          };\r\n        }\r\n        return board;\r\n      });\r\n    },\r\n\r\n    setText: (state, action: PayloadAction<SetTextType>) => {\r\n      let { item, value, boards } = action.payload;\r\n      let boardIndex = null as null | number\r\n      let itemIndex = null as null | number\r\n \r\n      //find current index board and item \r\n      boards.map((board, indexBoard) => {\r\n        board.items.map((itemLocal, index) => {\r\n           if(item === itemLocal) {\r\n             boardIndex = indexBoard\r\n             itemIndex = index\r\n           }\r\n        })\r\n        return board;\r\n      });\r\n\r\n      if(boardIndex === null || itemIndex === null) {\r\n        return\r\n      }\r\n     \r\n      state.boards[boardIndex].items[itemIndex].text = value\r\n    },\r\n\r\n    setColumn: (state, action: PayloadAction<SetColumnType>) => {\r\n      let { title, text } = action.payload;\r\n      let lastBoard = state.boards.length\r\n      let newBoard =  {\r\n        board: lastBoard,\r\n        title,\r\n        items: [\r\n          { id: 1, text },\r\n          \r\n        ],\r\n      }\r\n      state.boards = [\r\n        ...state.boards,\r\n        newBoard\r\n      ]\r\n      \r\n    },\r\n    setNewTextOfCard: (state, action: PayloadAction<SetNewTextOfCardType>) => {\r\n      let { value, board, boards } = action.payload;\r\n      let index = null as null | number\r\n      let id = null as null | number\r\n      let items = null  as null | ItemType[]\r\n\r\n      boards.map((boardLocal, indexBoard) => {\r\n        if(boardLocal === board) {\r\n           index = indexBoard\r\n           id = boardLocal.items.length\r\n           items = boardLocal.items\r\n        }\r\n        return boardLocal\r\n      })\r\n   \r\n      if(index === null || id === null || items === null) {\r\n        return \r\n      }\r\n      state.boards[index].items = [...items, {id, text: value}]\r\n      \r\n    },\r\n  },\r\n  \r\n});\r\n\r\nexport const { setItems, deleteCard, addCard, setText, setColumn, setNewTextOfCard } = boardReducer.actions;\r\n\r\nexport default boardReducer.reducer;\r\n\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport { AppDispatch, RootState } from '../Redux/redux'\r\n\r\n\r\n\r\nexport function setCookie(name: any, value: any, options: any = {}) {\r\n\r\n    options = {\r\n      path: '/',\r\n      ...options\r\n    };\r\n  \r\n    if (options.expires instanceof Date) {\r\n      options.expires = options.expires.toUTCString();\r\n    }\r\n  \r\n    let updatedCookie = encodeURIComponent(name) + \"=\" + encodeURIComponent(value);\r\n  \r\n    for (let optionKey in options) {\r\n      updatedCookie += \"; \" + optionKey;\r\n      let optionValue = options[optionKey];\r\n      if (optionValue !== true) {\r\n        updatedCookie += \"=\" + optionValue;\r\n      }\r\n    }\r\n  \r\n    document.cookie = updatedCookie;\r\n  }\r\n  \r\n\r\nexport const getUniqueKey = () => Math.random().toString(36).substr(2, 9)\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import styled from \"styled-components\"\r\n\r\n\r\nexport const BlueButtonStyle = styled.button`\r\n    background: #0C7CD5;\r\n    border-radius: 3px;\r\n    font-size: 15px;\r\n    line-height: 18px;\r\n    color: #FFFFFF;\r\n    outline: none;\r\n    border: none;\r\n    padding: 7px 12px;\r\n    cursor: pointer;\r\n    &:hover {\r\n        opacity: 0.8;\r\n    }\r\n  \r\n`","import React, { FC, useEffect, useState } from 'react';\r\nimport styled from \"styled-components\"\r\nimport { BlueButtonStyle } from '../../../../Styles/styleComponent';\r\nimport { ItemType } from '../../../Cards/Card/Card';\r\n\r\n\r\nconst PopUpWrapStyle = styled.div`\r\n   position: fixed;\r\n   width:100vw;\r\n   top: 0;\r\n   left: 0;\r\n   z-index: 1000;\r\n   display: flex;\r\n   justify-content: center;\r\n\r\n\r\n`\r\n\r\nconst PopUpFonStyle = styled.div`\r\n   position: fixed;\r\n   width:100vw;\r\n   height:100vh;\r\n   background: rgba(63, 63, 63, 0.45);\r\n   top: 0;\r\n   left: 0;\r\n   z-index: 1000;\r\n   cursor: pointer;\r\n`\r\n\r\nconst PopUpStyle = styled.div`\r\n    position: relative;\r\n    z-index: 10001;\r\n    justify-content: center;\r\n    margin-top: 40px;\r\n\r\n    & > div {\r\n        min-width: 300px;\r\n        max-width: 60vw;\r\n        padding: 16px;\r\n        background: #D4D4D4;\r\n        border-radius: 5px;\r\n    }\r\n  \r\n`\r\n\r\nconst PopUpTitleStyle = styled.div`\r\n    padding: 4px 17px 4px 4px;\r\n    background-color: #fff;\r\n    margin-right: 30px;\r\n    margin-bottom: 12px;\r\n    & > span {\r\n        font-weight: bold;\r\n        font-size: 24px;\r\n        line-height: 28px;\r\n        color: #212934;\r\n        word-break: break-word;\r\n    }\r\n`\r\n\r\nconst PopUpTextStyle = styled.div`\r\n   & > textarea {\r\n       min-height: 92px;\r\n       width: 100%;\r\n       outline: none;\r\n   }\r\n    \r\n  \r\n`\r\n\r\n\r\n\r\ninterface Props {\r\n    isActive: boolean;\r\n    text: string;\r\n    textButton?: string\r\n    placeholder?: string\r\n    setIsActive: (data: boolean) => void\r\n    buttonClick: (input: string) => void\r\n}\r\n\r\nlet plhDefault = \"Описание\"\r\nlet buttonDefault = \"Coxранить\"\r\n\r\nconst PopUpWithInput: FC<Props> = ({ isActive, text, textButton, placeholder, setIsActive, buttonClick }) => {\r\n\r\n    const [value,  setValue] = useState(text)\r\n\r\n    useEffect(() => {\r\n       setValue(text)\r\n    }, [isActive])\r\n\r\n    if (!isActive) {\r\n        return <div></div>\r\n    }\r\n\r\n    return <PopUpWrapStyle >\r\n        <PopUpFonStyle onClick={() => setIsActive(!isActive)} />\r\n        <PopUpStyle>\r\n            <div>\r\n                <PopUpTitleStyle>\r\n                    <span>\r\n                        {value}\r\n                    </span>\r\n                </PopUpTitleStyle>\r\n                <PopUpTextStyle>\r\n                    <textarea\r\n                        value={value}\r\n                        placeholder={placeholder ? placeholder : plhDefault}\r\n                        onChange={(e) => setValue(e.target.value)}\r\n                    />\r\n                </PopUpTextStyle>\r\n                <BlueButtonStyle onClick={() => buttonClick(value)}>\r\n                    {textButton ? textButton : buttonDefault}\r\n                </BlueButtonStyle>\r\n            </div>\r\n        </PopUpStyle>\r\n    </PopUpWrapStyle>\r\n\r\n    function ButtonFallback() {\r\n        \r\n    }\r\n}\r\n\r\nexport default PopUpWithInput","import React, { FC, useState } from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst ImgWitTextWrapStyle = styled.div`\r\n   display: inline-flex;\r\n   align-items: center;\r\n   padding: 7px 12px;\r\n   cursor: pointer;\r\n\r\n   &:hover {\r\n    background: #C4C4C4;\r\n    border-radius: 3px;\r\n   }\r\n\r\n   > span {\r\n    font-size: 15px;\r\n    line-height: 18px;\r\n    color: #626262;\r\n   }\r\n\r\n   > img {\r\n    margin-right: 13px;\r\n   }\r\n   \r\n   \r\n` \r\n\r\ninterface Props {\r\n   text: string\r\n   img: string\r\n   callback?: () => void\r\n}\r\n\r\nconst ImgWitText: FC<Props> = ({img, text, callback}) => {\r\n\r\n  return <ImgWitTextWrapStyle onClick={callback}>\r\n         <img src={img} alt={text} />\r\n         <span>{text}</span>\r\n  </ImgWitTextWrapStyle>\r\n}\r\n\r\nexport default ImgWitText","export default __webpack_public_path__ + \"static/media/arrow.f995ff23.svg\";","import React, { FC, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { BlueButtonStyle } from '../../../Styles/styleComponent'\r\nimport ImgWitText from '../ImgWithText/ImgWithText'\r\nimport Arrow from \"./img/arrow.svg\"\r\n\r\nconst AddCardWrapStyle = styled.form`\r\n      width:100%;\r\n`\r\nconst AddCarStyle = styled.div`\r\n      display: flex;\r\n      justify-content: space-between;\r\n`\r\n\r\nconst AddCarInputStyle = styled.div`\r\n  margin-bottom: 16px;\r\n      > textarea {\r\n          width: 100%;\r\n          height: 52px;\r\n          box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.25);\r\n          border-radius: 2px;\r\n          border: 0\r\n      }\r\n`\r\n\r\n\r\ninterface Props {\r\n    textNotAct?: string\r\n    imgNotActive?: string\r\n    imgActive?: string\r\n    textActiveLeft?: string\r\n    textActiveRight?: string\r\n    plh?: string\r\n    getValue: (value: string) => void\r\n}\r\nlet textNotActDf = \"Добавить еще одну карточку\"\r\nlet activeDfLeft = \"Добавить карточку\"\r\nlet activeDfRight = \"Отмена\"\r\nlet plhDf = \"Введите текст карточки\" \r\nlet imgDf = Arrow\r\n\r\nconst AddCard: FC<Props> = ({ \r\n     textNotAct = textNotActDf,\r\n     textActiveLeft = activeDfLeft, \r\n     textActiveRight = activeDfRight,\r\n     plh = plhDf,\r\n     imgActive = imgDf,\r\n     imgNotActive = imgDf,\r\n     getValue\r\n     \r\n    }) => {\r\n\r\n    const [isActive, setIsActive] = useState(false)\r\n    const [value, setValue] = useState(\"\")\r\n\r\n    if (!isActive) {\r\n        return <ImgWitText callback={() => setIsActive(true)} text={textNotAct} img={imgNotActive} />\r\n    }\r\n\r\n\r\n    return <AddCardWrapStyle onSubmit={(e) => ClickButton(e)} >\r\n        <AddCarInputStyle>\r\n            <textarea\r\n             required\r\n             placeholder={plh}\r\n             value={value}\r\n             onChange={(e) => setValue(e.target.value)}\r\n              />\r\n        </AddCarInputStyle>\r\n        <AddCarStyle>\r\n            <BlueButtonStyle>\r\n                {textActiveLeft}\r\n            </BlueButtonStyle>\r\n            <ImgWitText callback={Cancel} text={textActiveRight} img={imgActive} />\r\n        </AddCarStyle>\r\n\r\n    </AddCardWrapStyle>\r\n\r\n   function ClickButton(e: React.FormEvent<HTMLFormElement>) {\r\n       e.preventDefault()\r\n       getValue(value)\r\n       setIsActive(false)\r\n       setValue(\"\")\r\n   }\r\n\r\n    function Cancel() {\r\n        setIsActive(false)\r\n        setValue(\"\")\r\n    }\r\n}\r\n\r\nexport default AddCard","import React, { FC} from 'react'\r\nimport styled from \"styled-components\"\r\nimport { addCard } from '../../../Redux/reducers/boardReducer/boardReducer'\r\nimport { getUniqueKey } from '../../../VariablesAndFunc/Functions'\r\nimport AddCard from '../AddCard/AddCard'\r\n\r\n\r\n\r\nconst WrapItemStyle = styled.div`\r\n  background-color: #D4D4D4;\r\n  padding: 12px;\r\n  border-radius: 5px;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  align-content: space-between;\r\n\r\n`\r\n\r\nconst ContentItemStyle = styled.div`\r\n  overflow: hidden;\r\n  width: 100%;\r\n  \r\n\r\n`\r\n\r\nconst WrapTextStyle = styled.div`\r\n  cursor: pointer;\r\n  background: #FFFFFF;\r\n  box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.25);\r\n  border-radius: 2px;\r\n  margin-bottom: 12px;\r\n  word-break: break-word;\r\n\r\n  & > div {\r\n\r\n    padding: 8px 17px 8px 12px;\r\n  }\r\n  \r\n  & > span {\r\n    font-size: 15px;\r\n    line-height: 18px;\r\n    color: #212934;\r\n    display: block;\r\n  }\r\n\r\n`\r\n\r\nconst TitleStyle = styled.div`\r\n  margin-bottom: 16px;\r\n  height: 20px;\r\n  & > span {\r\n    font-size: 15px;\r\n    line-height: 18px;\r\n    color: #404B5A;\r\n\r\n  }\r\n\r\n`\r\n\r\n\r\n\r\n\r\n\r\nexport interface BoardStartType {\r\n    boardFrom: BoardType\r\n    itemFrom: ItemType \r\n}\r\n\r\nexport interface BoardEndType {\r\n    boardTo: BoardType\r\n    itemTo: ItemType | null\r\n}\r\n\r\n\r\n\r\nexport interface BoardType {\r\n    board: number\r\n    title: string \r\n    items: ItemType[] \r\n}\r\n\r\nexport interface ItemType {\r\n        id: number\r\n        text: string\r\n}\r\n\r\n\r\ninterface Props {\r\n    board: BoardType\r\n    moveItem: (from: BoardStartType | null, to: BoardEndType) => void\r\n    cardClick: (item: ItemType) => void\r\n    addNewCard:(value: string, board: BoardType) => void\r\n\r\n}\r\n\r\n\r\nlet startState = null as null | BoardStartType\r\nlet AddCardText = \"add card\"\r\nconst Card: FC<Props> = ({ board, moveItem, cardClick, addNewCard }) => {\r\n    const { title, items } = board\r\n\r\n    return <WrapItemStyle onDragOver={(e) => onDragOver(e)} onDrop={(e) => DropWrap(e)}>\r\n        <ContentItemStyle  >\r\n            <TitleStyle>\r\n                <span>\r\n                    {title}\r\n                </span>\r\n            </TitleStyle>\r\n            {items.map(item => {\r\n                let text = item.text\r\n                //set maximum text length\r\n                let maxCount = 60\r\n                if (item.text.length >= maxCount) {\r\n                    text = item.text.slice(0, maxCount) + \"...\"\r\n                }\r\n\r\n                return <WrapTextStyle key={getUniqueKey()}  >\r\n                    <div\r\n                        onDrag={(e) => onDrag(e)}\r\n                        onDragStart={(e) => dragStart(e, board, item)}\r\n                        draggable={true}\r\n                        onDragOver={(e) => onDragOver(e)}\r\n                        onDropCapture={(e) => Drop(e, item)}\r\n                        onDragEnter={(e) => DragEnter(e)}\r\n                        onDragLeave={(e) => DragLeave(e)}\r\n                        onClick={() => cardClick(item)}\r\n                        onDragEnd={(e) => {\r\n                            let el = e.currentTarget as HTMLDivElement\r\n                            el.style.opacity = \"1\"\r\n                            el.style.backgroundColor = \"#fff\"\r\n                        }}\r\n                    >\r\n                        {text}\r\n                    </div>\r\n                </WrapTextStyle>\r\n            })}\r\n        </ContentItemStyle>\r\n      \r\n          <AddCard getValue={AddCardFunc}/>\r\n        \r\n    </WrapItemStyle>\r\n\r\nfunction AddCardFunc(value: string) {\r\n   addNewCard(value, board)\r\n}\r\n\r\n//all function use this component\r\nfunction dragStart(event: React.MouseEvent<HTMLDivElement, MouseEvent>, board: BoardType, item: ItemType) {\r\n    let el = event.target as HTMLDivElement\r\n    let parent = el.parentElement\r\n    if (!parent) {\r\n        return\r\n    }\r\n    el.style.backgroundColor = \"#C7F1FF\"\r\n    parent.style.backgroundColor = \"#BEBEBE\"\r\n    el.style.boxShadow = \"0px 2px 4px rgba(0, 0, 0, 0.25), 0px 1px 1px rgba(0, 0, 0, 0.25)\"\r\n    startState = {boardFrom: board, itemFrom: item}\r\n\r\n    \r\n}\r\n\r\n\r\n\r\nfunction onDrag(event: React.DragEvent<HTMLDivElement>) {\r\n    event.preventDefault()\r\n    let el = event.target as HTMLDivElement\r\n    el.style.opacity = \"0\"\r\n    \r\n\r\n}\r\n\r\nfunction onDragOver(event: React.DragEvent<HTMLDivElement>) {\r\n    event.preventDefault() \r\n}\r\n\r\nfunction DragEnter(event: React.DragEvent<HTMLDivElement>) {\r\n    let el = event.currentTarget as HTMLDivElement\r\n    el.style.backgroundColor = \"#2ba92b\"\r\n    el.style.color = \"#fff\"\r\n\r\n}\r\n\r\nfunction DragLeave(event: React.DragEvent<HTMLDivElement>) {\r\n    event.preventDefault()\r\n    let el = event.target as HTMLDivElement\r\n    el.style.backgroundColor = \"\"\r\n    el.style.color = \"\"\r\n\r\n}\r\n\r\nfunction Drop(event: React.DragEvent<HTMLDivElement>, item: ItemType) {\r\n    event.preventDefault()\r\n    moveItem(startState, {boardTo: board, itemTo: item })\r\n    startState = null\r\n}\r\n\r\nfunction DropWrap(event: React.DragEvent<HTMLDivElement>) {\r\n    event.preventDefault()\r\n    moveItem(startState, {boardTo: board, itemTo: null})\r\n    startState = null\r\n}\r\n\r\n}\r\n\r\nexport default Card\r\n\r\n","import React, {  useState } from 'react'\r\n\r\n\r\n\r\nconst useActivePopUp = <D>(data?: D, active?: boolean) => {\r\n    const [isActive, setIsActive] = useState( active ? true : false)\r\n    const [content, setContent] = useState(data ? data : null)\r\n\r\n    return {\r\n        isActive,\r\n        setIsActive,\r\n        content,\r\n        setContent\r\n    }\r\n}\r\n\r\n\r\nexport default useActivePopUp","import React, { FC, useState } from 'react';\r\nimport styled from 'styled-components'\r\nimport { BlueButtonStyle } from '../../../Styles/styleComponent';\r\n\r\nconst TitleCardsStyle = styled.form`\r\n  padding: 24px 24px 0 24px;\r\n  display: inline-grid;\r\n  grid-column-gap: 24px;\r\n  grid-template-columns: repeat(3, auto);\r\n  input { \r\n    border: 1px solid #c1b1b1;\r\n    border-radius:5px;\r\n    padding: 0 12px;\r\n  }\r\n  \r\n`\r\n\r\ninterface Props {\r\n    getDataValue: (title: string, text: string) => void\r\n}\r\n\r\nlet plhTitle = \"typing column title\"\r\nlet plhName = \"typing column text\"\r\n\r\nconst CardTitle: FC<Props> = ({ getDataValue }) => {\r\n    const [text, setText] = useState(\"\")\r\n    const [title, setTitle] = useState(\"\")\r\n\r\n\r\n    return <TitleCardsStyle onSubmit={(e) => {\r\n        e.preventDefault()\r\n        getDataValue(title, text)\r\n        setText(\"text\")\r\n        setTitle(\"title\")\r\n    }}>\r\n        <BlueButtonStyle >\r\n            Add column\r\n    </BlueButtonStyle>\r\n        <input type=\"text\" required placeholder={plhTitle} value={title} onChange={(e) => setTitle(e.target.value)} />\r\n        <input type=\"text\" required placeholder={plhName} value={text} onChange={(e) => setText(e.target.value)} />\r\n    </TitleCardsStyle>\r\n}\r\n\r\nexport default CardTitle","import React, { FC, useState } from 'react'\r\nimport styled from \"styled-components\"\r\nimport { moveCartThunk, setColumn, setNewTextOfCard, setText } from '../../Redux/reducers/boardReducer/boardReducer'\r\nimport { getUniqueKey, useAppDispatch, useAppSelector } from '../../VariablesAndFunc/Functions'\r\nimport PopUpWithInput from '../Common/PopUps/PopWithInput/PopUpWithINput'\r\nimport Card, { BoardEndType, BoardStartType, BoardType, ItemType } from './Card/Card'\r\nimport useActivePopUp from './../Common/PopUps/useInstallPopUp';\r\nimport CardTitle from './CardTitle/CardTitle'\r\n\r\n\r\n\r\n\r\nconst WrapCardsStyle = styled.div`\r\n  padding: 36px 24px;\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\r\n  grid-gap: 24px;\r\n\r\n`\r\nconst PreviewTextStyle = styled.div`\r\n     padding: 24px;\r\n     display: grid;\r\n     grid-template-columns: 1fr 1fr;\r\n     grid-template-rows: 1fr;\r\n\r\n     p {\r\n      margin: 0;\r\n      }\r\n\r\n\r\n`\r\n\r\ninterface Props {\r\n\r\n}\r\n\r\n\r\n\r\n\r\nconst Cards: FC<Props> = () => {\r\n    let boards = useAppSelector((state) => state.boardReducer.boards)\r\n    let dispatch = useAppDispatch()\r\n\r\n    let [currentEl, setCurrentEl] = useState<ItemType | null>(null)\r\n\r\n    let { content, setContent, isActive, setIsActive } = useActivePopUp<string>()\r\n\r\n    return <>\r\n        <PreviewTextStyle>\r\n            <div>\r\n                <p>На этой странице мы видим мини доску для постановки задач. </p>\r\n                <p>Каждую задачу мы можем перетаскивать из одного блока в другой(Drag and Drop).</p>\r\n                <p>Можем изменять текст задачи и добавлять задачу.</p>\r\n                <p>Можем создавать множество блоков с задачами.</p>\r\n\r\n                <p>Инструменты:</p>\r\n                <p>Webpack, CreateReactApp, React, StyledComponent, ReduxToolKit, Typescript, Drag and Drop.</p>\r\n            </div>\r\n            <div>\r\n                <p>On this page we can see a mini board for creating tasks.</p>\r\n                <p>We can drag each task from one block to another(Drag and Drop).</p>\r\n                <p>Also we can change the text of the task and add a task.</p>\r\n                <p>We can create a many blocks with tasks.</p>\r\n\r\n                <p>Tools:</p>\r\n                <p>Webpack, CreateReactApp, React, StyledComponent, ReduxToolKit, Typescript, Drag and Drop.</p>\r\n\r\n            </div>\r\n\r\n        </PreviewTextStyle>\r\n        <CardTitle getDataValue={getDataValue} />\r\n        <WrapCardsStyle>\r\n            {boards.map(board => <Card addNewCard={addNewCard} cardClick={CardClick} moveItem={moveItem} key={getUniqueKey()} board={board} />)}\r\n        </WrapCardsStyle>\r\n        {content && <PopUpWithInput isActive={isActive} text={content} setIsActive={setIsActive} buttonClick={ButtonClick} />}\r\n    </>\r\n\r\n    function addNewCard(value: string, board: BoardType) {\r\n        dispatch(setNewTextOfCard({ value, board, boards }))\r\n    }\r\n\r\n    function getDataValue(title: string, text: string) {\r\n        dispatch(setColumn({ title, text }))\r\n    }\r\n\r\n    function CardClick(item: ItemType) {\r\n        setContent(item.text)\r\n        setIsActive(true)\r\n        setCurrentEl(item)\r\n    }\r\n\r\n    function ButtonClick(value: string) {\r\n        if (!currentEl) {\r\n            console.log(\"set Current element from function CardClick\")\r\n            return\r\n        }\r\n        dispatch(setText({ value, item: currentEl, boards }))\r\n        setIsActive(false)\r\n    }\r\n\r\n\r\n\r\n    //get initial and final state\r\n    function moveItem(from: BoardStartType | null, to: BoardEndType) {\r\n        dispatch(moveCartThunk({ from, to }))\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nexport default Cards","import React from 'react';\nimport styled from \"styled-components\"\nimport {\n  BrowserRouter,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport Cards from './components/Cards/Cards';\n\n\nconst AppDivStyle = styled.div`\n    width: 100%;\n    height: 100%;\n\n`\n\n\nfunction App() {\n\n  return (\n    <BrowserRouter>\n      <Switch>\n        <AppDivStyle >\n            <Route path='/' component={Cards} />\n        </AppDivStyle>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\n\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","let ThemeLight = {\r\n  color: {\r\n    type1: \"#D0D1D2\" as \"#D0D1D2\",\r\n    type2: \"#11263C\" as \"#11263C\",\r\n    type3: \"#F2F2F7\" as \"#F2F2F7\"\r\n  },\r\n  size: {\r\n    type1: \"12px\" as \"12px\",\r\n    type2: \"14px\" as \"14px\",\r\n    type3: \"16px\" as \"16px\",\r\n    type4: \"18px\" as \"18px\",\r\n  }\r\n};\r\n\r\ndeclare module \"styled-components\" {\r\n  export interface DefaultTheme extends ThemeLightType {}\r\n}\r\n\r\nexport type ThemeLightType = typeof ThemeLight\r\n\r\nexport default ThemeLight;\r\n","import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit'\r\nimport type { RootState } from './../redux'\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const getPost =  createAsyncThunk<list[]>(\r\n  'post/getPost', \r\nasync () => {\r\n  const response = await fetch('https://jsonplaceholder.typicode.com/todos/1', {\r\n    credentials: 'include',\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  })\r\n  return (await (response.json())) as list[]\r\n}\r\n )\r\n\r\n\r\n\r\ninterface list {\r\n  userId: number,\r\n  id: number,\r\n  title: string,\r\n  body:  string\r\n}\r\n// Define the initial state using that type\r\nconst initialState = {\r\n  value: 0,\r\n  list: [] as list[],\r\n  status: \"\"\r\n}\r\n\r\n// Define a type for the slice state\r\ntype CounterStateType = typeof initialState\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    increment: (state) => {\r\n      state.value += 1\r\n    },\r\n    decrement: (state) => {\r\n      state.value -= 1\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action: PayloadAction<number>) => {\r\n      state.value += action.payload\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase( getPost.pending, (state, action) => {\r\n        state.status = \"loading\"\r\n      }).addCase( getPost.fulfilled, (state, action) => {\r\n      \r\n        state.list = action.payload\r\n        state.status = \"success\"\r\n      }).addCase(getPost.rejected, (state, action) => {\r\n        state.status = \"reject\"\r\n      })\r\n  },\r\n})\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const selectCount = (state: RootState) => state.counterSlice.value\r\n\r\nexport default counterSlice.reducer","import { configureStore } from '@reduxjs/toolkit'\r\nimport boardReducer  from './reducers/boardReducer/boardReducer'\r\nimport counterSlice  from './reducers/reducerTollKitExample'\r\n\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    counterSlice,\r\n    boardReducer\r\n  },\r\n})\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport GlobalStyles from \"./Styles/globalStyle.js\"\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport ThemeLight from \"./Styles/Theme\"\nimport { ThemeProvider } from 'styled-components';\nimport 'antd/dist/antd.css';\nimport { store } from './Redux/redux';\n\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <ThemeProvider theme={ThemeLight}>\n      <React.StrictMode>\n        <GlobalStyles />\n        <App />\n      </React.StrictMode>\n    </ThemeProvider>\n  </Provider>\n\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}